// ==UserScript==
// @name         EBYS Plus
// @namespace    https://github.com/tkgmplus/EBYS
// @version      25.73
// @description  GitHub'dan güncellemeleri kontrol eden ve yükleyen sistem
// @author       Sen
// @match        https://ebys.tkgm.gov.tr/edys-web/sistemeGiris.xhtml
// @match        https://ebys.tkgm.gov.tr/edys-web/mainInbox.xhtml*
// @grant        GM_xmlhttpRequest
// @grant        GM_setValue
// @grant        GM_getValue
// @grant        GM_notification
// @grant        GM_addStyle
// ==/UserScript==


(function () {
    "use strict";

    // 📌 Güncelleme dosyalarının URL'leri
    const VERSION_URL = "https://raw.githubusercontent.com/tkgmplus/EBYS/main/Version.txt"; // Versiyon ve ve özelikler çekiliyor
    const SCRIPT_URL = "https://raw.githubusercontent.com/tkgmplus/EBYS/main/EBYS_Plus_Guncelleme.txt"; // Guncell Dosya indiriliyor

    // 📌 Son güncelleme kontrol zamanı ve kayıtlı sürümü al
    let lastCheck = GM_getValue("lastCheck", 0);
    
    let savedVersion = GM_getValue("scriptVersion", "0.0.0");


    /**
     * 📌 GitHub'dan güncelleme olup olmadığını kontrol eder.
     * @param {boolean} manual - Eğer kullanıcı manuel kontrol ettiyse true olur.
     */
    function checkForUpdate(manual = false) {
        let now = Date.now();

        // Otomatik kontrolde, 15 günden önce tekrar kontrol etmeye gerek yok.
        if (!manual && now - lastCheck < 15 * 24 * 60 * 60 * 1000) {
            console.log("Güncelleme kontrolü yapılmadı (15 gün geçmedi).");
            return;
        }

        // GitHub'dan version.txt dosyasını çek
        GM_xmlhttpRequest({
            method: "GET",
            url: VERSION_URL,
            onload: function (response) {
                if (response.status === 200) {
                    let data = response.responseText.split("\n");
                    let newVersion = data[0].trim(); // İlk satır sürüm numarası
                    let changelog = data.slice(1).join("<br>"); // Geri kalan güncelleme notları




if (newVersion > savedVersion) {
    showUpdateNotification(newVersion, changelog);// Sol Alt Köşe GÜncelleme Ekranını Aç
} else {
    if (manual) {
        showCurrentVersionPopup();// GÜncelsiniz Bildirimi
    }
}



// ***********************  Güncelsiniz Popup BAŞ  ************************
function showCurrentVersionPopup() {
    // Önce varsa eski bildirimi kaldır
    let existingPopup = document.getElementById("currentVersionPopup");
    if (existingPopup) existingPopup.remove();

    // Yeni pencere oluştur
    let popup = document.createElement("div");
    popup.id = "currentVersionPopup";
    popup.innerHTML = `
        <div class="version-container">
            <h2>✅ Güncel Sürüm Kullanıyorsunuz!</h2>
            <p>Şu anda en son sürümü kullanıyorsunuz. Güncelleme gerekmiyor.</p>
            <button id="closeVersionPopup">Kapat</button>
        </div>
    `;

    document.body.appendChild(popup);

    // Kapatma butonu
    document.getElementById("closeVersionPopup").addEventListener("click", () => {
        popup.classList.remove("show");
        setTimeout(() => popup.remove(), 300);
    });

    // Animasyon ekleyelim
    setTimeout(() => popup.classList.add("show"), 50);

    // Stil ekleme
    GM_addStyle(`
        #currentVersionPopup {
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%) scale(0.8);
            background: rgba(30, 30, 30, 0.95);
            color: white;
            padding: 20px;
            border-radius: 10px;
            box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.2);
            text-align: center;
            width: 300px;
            max-width: 90%;
            opacity: 0;
            transition: transform 0.3s ease, opacity 0.3s ease;
            z-index: 9999;
        }

        #currentVersionPopup.show {
            opacity: 1;
            transform: translate(-50%, -50%) scale(1);
        }

        .version-container h2 {
            margin: 0 0 10px;
            font-size: 18px;
        }

        .version-container p {
            font-size: 14px;
            margin-bottom: 15px;
        }

        #closeVersionPopup {
            padding: 8px 12px;
            background: #007bff;
            color: white;
            border: none;
            cursor: pointer;
            border-radius: 5px;
            transition: background 0.2s ease;
        }

        #closeVersionPopup:hover {
            background: #0056b3;
        }
    `);
}

// ***********************  Güncelsiniz Popup SON ************************

                }
            }
        });

        // Kontrol zamanını kaydet
        GM_setValue("lastCheck", now);
    }





    /**
     * 📌 Sağ üst köşeye manuel güncelleme kontrol butonu ekler.
     */
    function addManualCheckButton() {
        // Eğer buton zaten varsa tekrar ekleme
        if (document.getElementById("manualUpdateButton")) return;

        let manualButton = document.createElement("button");
        manualButton.innerText = "🔍 Güncellemeyi Kontrol Et";
        manualButton.id = "manualUpdateButton";
        document.body.appendChild(manualButton);

        manualButton.addEventListener("click", () => checkForUpdate(true));

        GM_addStyle(`
            #manualUpdateButton {
                position: fixed;
                top: 10px;
                right: 10px;
                z-index: 1000;
                padding: 8px 12px;
                background: #28a745;
                color: white;
                border: none;
                border-radius: 5px;
                cursor: pointer;
                box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.2);
                transition: all 0.3s ease;
            }
            #manualUpdateButton:hover {
                background: #218838;
            }
        `);
    }

    /**
     * 📌 Güncelleme bildirimi ekranı oluşturur.
     * @param {string} newVersion - Yeni sürüm numarası
     * @param {string} changelog - Güncelleme notları
     */
function showUpdateNotification(newVersion, changelog) {
    // 📌 Eğer daha önce açılmış bir güncelleme penceresi varsa, önce onu kaldır
    let existingPopup = document.getElementById("updatePopup");
    if (existingPopup) existingPopup.remove();

    // 📌 Yeni güncelleme bildirim penceresini oluştur
    let updateDiv = document.createElement("div");
    updateDiv.id = "updatePopup";
    updateDiv.innerHTML = `
        <div class="update-container">
            <h3>🔄 Yeni Güncelleme Mevcut (${newVersion})</h3>
            <p class="changelog">${changelog}</p>
            <div class="button-group">
                <button id="updateNow">🔄 Güncelle</button>
                <button id="ignoreUpdate">❌ Vazgeç</button>
            </div>
        </div>
    `;

    // 📌 Sayfaya güncelleme penceresini ekle
    document.body.appendChild(updateDiv);

    // 📌 Butonlara tıklanınca çalışacak olayları tanımla
    document.getElementById("updateNow").addEventListener("click", updateScript);  // Güncelleme butonu
    document.getElementById("ignoreUpdate").addEventListener("click", () => updateDiv.remove());  // Kapatma butonu

    // 📌 Tarayıcı bildirimini göster
    GM_notification({
        text: ` 🔄 Mevcut Sürüm: ${savedVersion}\n ✨ Yeni Sürüm: ${newVersion}\n\n 🚀 Güncellemek için tıklayın!`,
        title: "🔔 EBYS PLUS Güncelleme \n ---------------------------------------------------------",
        highlight: true,
        timeout: 20000
    });


    // 📌 Güncelleme penceresinin stilini belirle
    GM_addStyle(`
        /* 📌 Güncelleme bildirim penceresinin konumu ve temel stilleri */
        #updatePopup {
            position: fixed;
            bottom: 20px;
            left: 20px;
            background: rgba(30, 30, 30, 0.95);
            color: white;
            padding: 15px;
            border-radius: 10px;
            box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.2);
            width: 320px;
            max-width: 90%;
            transition: transform 0.3s ease, opacity 0.3s ease;
            transform: translateY(100px);
            opacity: 0;
            z-index: 9999;
        }

        /* 📌 Açılma efekti */
        #updatePopup.show {
            transform: translateY(0);
            opacity: 1;
        }

        /* 📌 Başlık stilleri */
        .update-container h3 {
            margin: 0 0 10px;
            font-size: 16px;
        }

        /* 📌 Güncelleme notlarının görünümü */
        .update-container .changelog {
            font-size: 14px;
            max-height: 120px;
            overflow-y: auto;
            padding: 5px;
            background: rgba(255, 255, 255, 0.1);
            border-radius: 5px;
            margin-bottom: 10px;
        }

        /* 📌 Butonları hizalama */
        .button-group {
            display: flex;
            justify-content: space-between;
        }

        /* 📌 Butonların genel stili */
        .button-group button {
            padding: 7px 12px;
            border: none;
            cursor: pointer;
            border-radius: 5px;
            font-size: 14px;
            transition: background 0.2s ease;
        }

        /* 📌 Güncelleme butonu */
        #updateNow {
            background: #007bff;
            color: white;
        }
        #updateNow:hover {
            background: #0056b3;
        }

        /* 📌 Vazgeç butonu */
        #ignoreUpdate {
            background: #dc3545;
            color: white;
        }
        #ignoreUpdate:hover {
            background: #a71d2a;
        }
    `);

    // 📌 Bildirimin görünmesini sağlayan animasyonu başlat (0.1 saniye gecikmeyle)
    setTimeout(() => updateDiv.classList.add("show"), 100);
}

    /**
     * 📌 Güncellemeyi indirip uygulayan fonksiyon
     */
    function updateScript() {
        GM_xmlhttpRequest({
            method: "GET",
            url: SCRIPT_URL,
            onload: function (response) {
                if (response.status === 200) {
                    GM_setValue("savedScript", response.responseText);
                    GM_setValue("scriptVersion", response.responseText.match(/@version\s+([\d.]+)/)?.[1] || "0.0.0");



                    // GitHub'dan version.txt dosyasını çek
                    GM_xmlhttpRequest({
                        method: "GET",
                        url: VERSION_URL,
                        onload: function (response) {
                            if (response.status === 200) {
                                let data = response.responseText.split("\n");
                                let newVersion = data[0].trim(); // İlk satır sürüm numarası
                                GM_setValue("scriptVersion", newVersion); // Yeni sürümü kaydet
                            }}})

                    showConfetti();
                    showToast("🎉 Yeni sürüm yüklendi! Sayfa 3 saniye içinde yenilenecek.", "success");

                    setTimeout(() => {
                        location.reload();
                    }, 3000);
                }
            }
        });
    }

    /**
     * 📌 Sağ alt köşede bilgilendirme mesajı gösterir.
     * @param {string} message - Gösterilecek mesaj
     * @param {string} type - Mesaj tipi (info, success, error vb.)
     */
    function showToast(message, type = "info") {
        let toast = document.createElement("div");
        toast.className = `toast ${type}`;
        toast.innerText = message;
        document.body.appendChild(toast);
        setTimeout(() => toast.remove(), 4000);
    }

    /**
     * 📌 Konfeti animasyonu oynatır.
     */
    function showConfetti() {
        let confettiScript = document.createElement("script");
        confettiScript.src = "https://cdn.jsdelivr.net/npm/canvas-confetti@1.3.1";
        document.head.appendChild(confettiScript);
        confettiScript.onload = () => {
            let duration = 3 * 1000;
            let end = Date.now() + duration;

            (function frame() {
                confetti({ particleCount: 5, angle: 60, spread: 55, origin: { x: 0 } });
                confetti({ particleCount: 5, angle: 120, spread: 55, origin: { x: 1 } });

                if (Date.now() < end) requestAnimationFrame(frame);
            })();
        };
    }

    // 📌 Kayıtlı betiği çalıştır (önceki güncelleme sonrası)
    function injectSavedScript() {
        let savedScript = GM_getValue("savedScript", null);
        if (savedScript) eval(savedScript);
    }

    // 📌 Script çalıştırıldığında gerekli fonksiyonları çağır
    injectSavedScript();
    addManualCheckButton();
    setTimeout(() => checkForUpdate(false), 1000);
})();


